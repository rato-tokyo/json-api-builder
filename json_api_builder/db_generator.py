# json_api_builder/db_generator.py
import json
import os
from pathlib import Path

from sqlmodel import Session, SQLModel, create_engine


def generate_db_from_json_file(
    model: type[SQLModel],
    json_path: Path | str,
    db_path: str,
    overwrite: bool = False,
) -> None:
    """
    Populates the database from a single JSON file containing an array of records.
    The 'id' for each record is automatically generated by the database.

    Args:
        model: The SQLModel class for the table.
        json_path: The path to the input JSON file.
        db_path: The path to the output SQLite database file.
        overwrite: If True, the existing database file will be deleted before generation.
    """
    engine = create_engine(f"sqlite:///{db_path}")

    try:
        if overwrite and os.path.exists(db_path):
            os.remove(db_path)

        SQLModel.metadata.create_all(engine)

        with Session(engine) as session:
            with open(json_path, encoding="utf-8") as f:
                records = json.load(f)
                if not isinstance(records, list):
                    raise TypeError("JSON file must contain a list of records.")

                for record_data in records:
                    # idフィールドが存在していても無視し、DBの自動採番に任せる
                    if "id" in record_data:
                        del record_data["id"]

                    db_item = model.model_validate(record_data)
                    session.add(db_item)

            session.commit()
    finally:
        engine.dispose()
